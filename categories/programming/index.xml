<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on KG – Hacks. Thoughts. Writings.</title>
    <link>https://kirang89.github.io/kirang.in/categories/programming/</link>
    <description>Recent content in Programming on KG – Hacks. Thoughts. Writings.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jan 2016 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://kirang89.github.io/kirang.in/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rationals vs Decimals in Clojure</title>
      <link>https://kirang89.github.io/kirang.in/post/rationals-vs-decimals-clojure/</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/rationals-vs-decimals-clojure/</guid>
      <description>Use rationals if accuracy is your main concern. For example, operations on decimals are not associative.  (let [a 1.0e50 b -1.0e50 c 17.0e00] (= (+ (+ a b) c) (+ a (+ b c)))) ; =&amp;gt; false From the above example, one can infer that decimals are subjected to Floating Point corruption. You can find more examples here.
 Rationals are slower in terms of operations on them when compared to decimals.</description>
    </item>
    
    <item>
      <title>Concurrent Prime Sieve in Clojure</title>
      <link>https://kirang89.github.io/kirang.in/post/concurrent-prime-sieve-in-clojure/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/concurrent-prime-sieve-in-clojure/</guid>
      <description>While watching the Go Concurrency Patterns talk by Rob Pike, I came across a Concurrent Prime Sieve implementation in Go which Rob had claimed to be beautiful concurrent code. Curious enough, I checked out the example and decided on implementing it in Clojure.
Let&amp;rsquo;s begin by creating an infinite sequence generator(starting from 2):
(defn num-generator [out] (go (loop [n 2] (&amp;gt;!! out n) (recur (inc n))))) The go block ensures that the body is run on a seperate thread.</description>
    </item>
    
    <item>
      <title>Fetching data with a raw SQL query in SQLAlchemy</title>
      <link>https://kirang89.github.io/kirang.in/post/fetching-data-with-raw-sql-query-in-sqlalchemy/</link>
      <pubDate>Sun, 22 Nov 2015 00:00:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/fetching-data-with-raw-sql-query-in-sqlalchemy/</guid>
      <description>The following is a sane way of fetching data using a raw SQL query in SQLAlchemy:
query = &amp;#39;select * from books where author=:author&amp;#39; from sqlalchemy import text result = yoursession.execute(text(query), {&amp;#39;author&amp;#39;: &amp;#39;Neil Degrasse Tyson&amp;#39;}) from collections import namedtuple Book = namedtuple(&amp;#39;Book&amp;#39;, result.keys()) # Create a namedtuple for each row books = [Record(*r) for r in res.fetchall()] # Using namedtuple allows you to access attributes using the # dot operator instead of relying on indexes for book in books: print(book.</description>
    </item>
    
    <item>
      <title>Different applications of reduce in Clojure</title>
      <link>https://kirang89.github.io/kirang.in/post/different-applications-of-reduce-in-clojure/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/different-applications-of-reduce-in-clojure/</guid>
      <description>I&amp;rsquo;ve just started learning Clojure using Clojure for the Brave and True and solving problems on 4Clojure. While doing so, I&amp;rsquo;ve noticed that a lot of problems that seem tricky can be quickly solved using clojure.core/reduce.
This post is an effort to document some snippets to demonstrate how useful reduce can be.
Reverse a collection (defn myreverse [coll] (reduce conj &amp;#39;() coll)) (myreverse &amp;#39;(1 2 3 4)) ;; (4 3 2 1) Find frequency of words in a string (defn freq [str] (reduce #(assoc %1 %2 (inc (%1 %2 0))) {} (clojure.</description>
    </item>
    
    <item>
      <title>Setting up ACL in Mosquitto using Postgres</title>
      <link>https://kirang89.github.io/kirang.in/post/setting-up-acl-in-mosquitto-using-postgres/</link>
      <pubDate>Sat, 23 May 2015 00:00:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/setting-up-acl-in-mosquitto-using-postgres/</guid>
      <description>Lately, I&amp;rsquo;ve been playing around with Mosquitto and MQTT in general. &amp;ldquo;Kiran Gangadharan&amp;rdquo; that is essential to prevent unauthorized access to topics is some sort of an access control mechanism. In this post, I&amp;rsquo;ll illustrate the necessary steps for setting up an ACL(Access Control List) using Postgres and mosquitto-auth-plugin.
Install Dependencies sudo apt-get install libc-ares-dev libcurl4-openssl-dev uuid-dev postgresql libpq-dev git  Install Mosquitto Download Mosquitto from source:
wget http://mosquitto.org/files/source/mosquitto-1.4.1.tar.gz  Build it from source:</description>
    </item>
    
    <item>
      <title>Creating a Mutable Array data type in sqlalchemy</title>
      <link>https://kirang89.github.io/kirang.in/post/creating-a-mutable-array-data-type-in-sqlalchemy/</link>
      <pubDate>Sat, 09 Aug 2014 00:00:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/creating-a-mutable-array-data-type-in-sqlalchemy/</guid>
      <description>The problem with using the ARRAY datatype in sqlalchemy is that it&amp;rsquo;s immutable. This means it isn&amp;rsquo;t possible to add new data into array once it has been initialised. Unfortunately, I couldn&amp;rsquo;t find any good solution to create mutable arrays until I came across this snippet by Michael Bayer, the author of sqlalchemy himself:
from sqlalchemy.ext.mutable import Mutable from sqlalchemy.dialects.postgresql import ARRAY class MutableList(Mutable, list): def append(self, value): list.append(self, value) self.</description>
    </item>
    
    <item>
      <title>Setting up Jenkins as a watchdog for your Python application</title>
      <link>https://kirang89.github.io/kirang.in/post/setting-up-jenkins-as-a-watchdog-for-your-python-application/</link>
      <pubDate>Thu, 28 Nov 2013 20:19:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/setting-up-jenkins-as-a-watchdog-for-your-python-application/</guid>
      <description>In order to facilitate an efficient collaboration amongst developer teams, it is very important to keep the development workflow as simple and straightforward as possible. Version Control is one tool that helps with this. Continuous Integration is another one. Below, I&amp;rsquo;ll illustrate the steps needed to configure a basic Python application with Jenkins, a CI server that automates a lot of the repetitive stuff, so that you can focus on writing code.</description>
    </item>
    
    <item>
      <title>Building an open-source Python application the right way</title>
      <link>https://kirang89.github.io/kirang.in/post/building-an-open-source-python-application-the-right-way/</link>
      <pubDate>Mon, 09 Sep 2013 22:44:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/building-an-open-source-python-application-the-right-way/</guid>
      <description>&lt;p&gt;If you love Python and love open source like I do, you&amp;rsquo;d probably be
open sourcing something new every day/week/month. Sure that there are
quite a lot of articles online that tell you the best practices of
writing Python code, testing, packaging, distributing etc, I haven&amp;rsquo;t
really found a good article that highlights what are the best
practices/conventions to be followed while building a full fledged and
open source Python application. So I decided to write one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Familiarising yourself with a large codebase</title>
      <link>https://kirang89.github.io/kirang.in/post/familiarising-yourself-with-a-large-codebase/</link>
      <pubDate>Fri, 06 Sep 2013 02:56:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/familiarising-yourself-with-a-large-codebase/</guid>
      <description>I&amp;rsquo;m sure that a lot of developers find it harder to read existing code and understand the ideals behind it, rather than writing it from scratch, themselves. I too have this same problem, and so started looking around online as to how people have dealt with it. I&amp;rsquo;ve compiled some good answers from various sources, below:
 Try and understand at a high level, what the purpose of the code is, and then identify the key elements/functions that help achieve this purpose Try to read as much design and documentation about the project before diving in Try and figure out the relations between various components and then draw/visualise an architecture diagram Talk to authors and clarify things with them beforehand Go through unit tests to get a high level overview Start with the entry point in the program.</description>
    </item>
    
    <item>
      <title>JVM Profiling Disclosures</title>
      <link>https://kirang89.github.io/kirang.in/post/jvm-profiling-disclosures/</link>
      <pubDate>Wed, 22 May 2013 02:55:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/jvm-profiling-disclosures/</guid>
      <description>Well, I’ve never actually given importance to the term ”profiling” till a few days ago. The real deal was that I was just too lazy to actually run a profiler and then to try interpret the stats and hopefully find the bottleneck in the code. So to avoid all this hassle, I tried to be careful while writing code to make sure I don’t leave any open doors for memory leaks or poor CPU utilization.</description>
    </item>
    
    <item>
      <title>My Sublime workflow</title>
      <link>https://kirang89.github.io/kirang.in/post/my-sublime-workflow/</link>
      <pubDate>Sat, 04 May 2013 13:44:00 +0530</pubDate>
      
      <guid>https://kirang89.github.io/kirang.in/post/my-sublime-workflow/</guid>
      <description> The settings I use for Sublime Text 2:
{ &amp;#34;color_scheme&amp;#34;: &amp;#34;Packages/User/Tomorrow-Night.tmTheme&amp;#34;, &amp;#34;detect_slow_plugins&amp;#34;: false, &amp;#34;draw_white_space&amp;#34;: &amp;#34;all&amp;#34;, &amp;#34;find_selected_text&amp;#34;: true, &amp;#34;fold_buttons&amp;#34;: false, &amp;#34;folder_exclude_patterns&amp;#34;: [ &amp;#34;.svn&amp;#34;, &amp;#34;.git&amp;#34;, &amp;#34;.hg&amp;#34;, &amp;#34;CVS&amp;#34;, &amp;#34;_build&amp;#34;, &amp;#34;dist&amp;#34;, &amp;#34;build&amp;#34;, &amp;#34;site&amp;#34; ], &amp;#34;font_face&amp;#34;: &amp;#34;Ubuntu Mono&amp;#34;, &amp;#34;font_options&amp;#34;: [ &amp;#34;subpixel_antialias&amp;#34; ], &amp;#34;font_size&amp;#34;: 13, &amp;#34;highlight_line&amp;#34;: true, &amp;#34;ignored_packages&amp;#34;: [ &amp;#34;Vintage&amp;#34; ], &amp;#34;rulers&amp;#34;: [ 80, 100 ], &amp;#34;soda_classic_tabs&amp;#34;: true, &amp;#34;theme&amp;#34;: &amp;#34;Soda Dark.sublime-theme&amp;#34;, &amp;#34;translate_tabs_to_spaces&amp;#34;: true, &amp;#34;trim_trailing_white_space_on_save&amp;#34;: true }  Plugins  Emmet-Sublime SublimeLinter SublimeREPL SideBarEnhancements Markdown Preview Git  Others  Tomorrow-Night color scheme Soda Dark theme  </description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on Kiran Gangadharan</title>
    <link>http://kirang.in/categories/clojure/</link>
    <description>Recent content in Clojure on Kiran Gangadharan</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Dec 2015 00:00:00 +0530</lastBuildDate>
    <atom:link href="http://kirang.in/categories/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrent Prime Sieve in Clojure</title>
      <link>http://kirang.in/post/concurrent-prime-sieve-in-clojure/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0530</pubDate>
      <guid>http://kirang.in/post/concurrent-prime-sieve-in-clojure/</guid>
      <description>&lt;p&gt;While watching the&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=f6kdp27TYZs&#34;&gt;Go Concurrency Patterns talk&lt;/a&gt; by&#xA;Rob Pike, I came across a&#xA;&lt;a href=&#34;http://tinyurl.com/gosieve&#34;&gt;Concurrent Prime Sieve implementation in Go&lt;/a&gt; which&#xA;Rob had claimed to be beautiful concurrent code. Curious enough, I checked out&#xA;the example and decided on implementing it in Clojure.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s begin by creating an infinite sequence generator(starting from 2):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#838ba7&#34;&gt;1&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#838ba7&#34;&gt;2&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#838ba7&#34;&gt;3&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#838ba7&#34;&gt;4&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#838ba7&#34;&gt;5&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e78284&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color:#f2d5cf&#34;&gt;num-generator&lt;/span&gt; [&lt;span style=&#34;color:#f2d5cf&#34;&gt;out&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#8caaee&#34;&gt;go&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#ca9ee6&#34;&gt;loop &lt;/span&gt;[&lt;span style=&#34;color:#f2d5cf&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#8caaee&#34;&gt;&amp;gt;!!&lt;/span&gt; &lt;span style=&#34;color:#f2d5cf&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f2d5cf&#34;&gt;n&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#8caaee&#34;&gt;recur&lt;/span&gt; (&lt;span style=&#34;color:#99d1db&#34;&gt;inc &lt;/span&gt;&lt;span style=&#34;color:#f2d5cf&#34;&gt;n&lt;/span&gt;)))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; block ensures that the body is run on a seperate thread. I used the&#xA;blocking put instead of the parking one to only generate a number when required&#xA;by the program. Had I used the parking put &lt;code&gt;&amp;gt;!&lt;/code&gt; instead, we would&amp;rsquo;ve encountered&#xA;the &lt;code&gt;OutOfMemory&lt;/code&gt; exception while executing the function.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Kiran Gangadharan</title>
    <link>http://kirang.in/tags/programming/</link>
    <description>Recent content in Programming on Kiran Gangadharan</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Dec 2015 00:00:00 +0530</lastBuildDate>
    <atom:link href="http://kirang.in/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrent Prime Sieve in Clojure</title>
      <link>http://kirang.in/post/concurrent-prime-sieve-in-clojure/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0530</pubDate>
      <guid>http://kirang.in/post/concurrent-prime-sieve-in-clojure/</guid>
      <description>While watching the Go Concurrency Patterns talk by Rob Pike, I came across a Concurrent Prime Sieve implementation in Go which Rob had claimed to be beautiful concurrent code. Curious enough, I checked out the example and decided on implementing it in Clojure.&#xA;Let&amp;rsquo;s begin by creating an infinite sequence generator(starting from 2):&#xA;(defn num-generator [out] (go (loop [n 2] (&amp;gt;!! out n) (recur (inc n))))) The go block ensures that the body is run on a seperate thread.</description>
    </item>
    <item>
      <title>The Unix Philosophy - A Summary</title>
      <link>http://kirang.in/post/the-unix-philosophy-summary/</link>
      <pubDate>Thu, 12 Dec 2013 20:45:00 +0530</pubDate>
      <guid>http://kirang.in/post/the-unix-philosophy-summary/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Rule ofÂ Modularity&lt;/strong&gt;: Write simple parts connected by clean&#xA;interfaces.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Rule of Clarity&lt;/strong&gt;: Clarity is better than cleverness.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Rule of Composition&lt;/strong&gt;: Design programs to be connected to other&#xA;programs.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Building an open-source Python application the right way</title>
      <link>http://kirang.in/post/building-an-open-source-python-application-the-right-way/</link>
      <pubDate>Mon, 09 Sep 2013 22:44:00 +0530</pubDate>
      <guid>http://kirang.in/post/building-an-open-source-python-application-the-right-way/</guid>
      <description>&lt;p&gt;If you love Python and love open source like I do, you&amp;rsquo;d probably be&#xA;open sourcing something new every day/week/month. Sure that there are&#xA;quite a lot of articles online that tell you the best practices of&#xA;writing Python code, testing, packaging, distributing etc, I haven&amp;rsquo;t&#xA;really found a good article that highlights what are the best&#xA;practices/conventions to be followed while building a full fledged and&#xA;open source Python application. So I decided to write one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type and Object in Python</title>
      <link>http://kirang.in/post/type-and-object-in-python/</link>
      <pubDate>Wed, 22 May 2013 01:59:00 +0530</pubDate>
      <guid>http://kirang.in/post/type-and-object-in-python/</guid>
      <description>&lt;p&gt;Recently I stumbled across an article talking about the importance of&#xA;understanding type and object in Python, so thought of writing a small&#xA;post on it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

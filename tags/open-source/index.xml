<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Open Source on KG – Hacks. Thoughts. Writings.</title>
    <link>http://kirang.in/tags/open-source/</link>
    <description>Recent content in Open Source on KG – Hacks. Thoughts. Writings.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Oct 2013 18:51:00 +0530</lastBuildDate>
    
	<atom:link href="http://kirang.in/tags/open-source/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An Eventful September</title>
      <link>http://kirang.in/post/an-eventful-september/</link>
      <pubDate>Thu, 03 Oct 2013 18:51:00 +0530</pubDate>
      
      <guid>http://kirang.in/post/an-eventful-september/</guid>
      <description>&lt;p&gt;Looking back at September, it&amp;rsquo;s probably been one of the most happening
months for me in this year. Well, at least technically. I will try and
recollect some bits from the eventlog here.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building an open-source Python application the right way</title>
      <link>http://kirang.in/post/building-an-open-source-python-application-the-right-way/</link>
      <pubDate>Mon, 09 Sep 2013 22:44:00 +0530</pubDate>
      
      <guid>http://kirang.in/post/building-an-open-source-python-application-the-right-way/</guid>
      <description>&lt;p&gt;If you love Python and love open source like I do, you&amp;rsquo;d probably be
open sourcing something new every day/week/month. Sure that there are
quite a lot of articles online that tell you the best practices of
writing Python code, testing, packaging, distributing etc, I haven&amp;rsquo;t
really found a good article that highlights what are the best
practices/conventions to be followed while building a full fledged and
open source Python application. So I decided to write one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Familiarising yourself with a large codebase</title>
      <link>http://kirang.in/post/familiarising-yourself-with-a-large-codebase/</link>
      <pubDate>Fri, 06 Sep 2013 02:56:00 +0530</pubDate>
      
      <guid>http://kirang.in/post/familiarising-yourself-with-a-large-codebase/</guid>
      <description>I&amp;rsquo;m sure that a lot of developers find it harder to read existing code and understand the ideals behind it, rather than writing it from scratch, themselves. I too have this same problem, and so started looking around online as to how people have dealt with it. I&amp;rsquo;ve compiled some good answers from various sources, below:
 Try and understand at a high level, what the purpose of the code is, and then identify the key elements/functions that help achieve this purpose Try to read as much design and documentation about the project before diving in Try and figure out the relations between various components and then draw/visualise an architecture diagram Talk to authors and clarify things with them beforehand Go through unit tests to get a high level overview Start with the entry point in the program.</description>
    </item>
    
    <item>
      <title>Make your open source project documentation suck less</title>
      <link>http://kirang.in/post/make-your-open-source-project-documentation-suck-less/</link>
      <pubDate>Tue, 07 May 2013 16:55:00 +0530</pubDate>
      
      <guid>http://kirang.in/post/make-your-open-source-project-documentation-suck-less/</guid>
      <description>I just stumbled into this talk about documentation by Jacob-Kaplan Moss and it was really an insightful look into how one must design the documentation for an open source project. Below is the gist of his talk:
Documentation is communication This is the single most important point that you need to understand. Documentation is not just written as a guide, but as a means to communicate with various developers and users across the globe.</description>
    </item>
    
  </channel>
</rss>